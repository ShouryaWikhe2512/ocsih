import jsPDF from 'jspdf';
import { Incident } from './authority-types';

export function generatePDF(incident: Incident, shouldMaskPII: boolean = false): void {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(16);
  doc.text('Government of India - Incident Report', 20, 20);
  doc.setFontSize(12);
  doc.text('Ministry of Earth Sciences', 20, 30);
  
  // Incident details
  doc.setFontSize(14);
  doc.text(`Incident ID: ${incident.id}`, 20, 50);
  doc.setFontSize(12);
  doc.text(`Event Type: ${incident.eventType.replace('_', ' ').toUpperCase()}`, 20, 60);
  doc.text(`Severity: ${incident.severity.toUpperCase()}`, 20, 70);
  doc.text(`Status: ${incident.status.replace('_', ' ').toUpperCase()}`, 20, 80);
  doc.text(`Confidence: ${Math.round(incident.confidence * 100)}%`, 20, 90);
  
  // Location
  doc.text(`Location: ${incident.location.address}`, 20, 110);
  doc.text(`District: ${incident.location.district}, ${incident.location.state}`, 20, 120);
  doc.text(`Coordinates: ${incident.location.lat.toFixed(6)}, ${incident.location.lng.toFixed(6)}`, 20, 130);
  
  // Time
  doc.text(`Timestamp: ${new Date(incident.timestamp).toLocaleString()}`, 20, 140);
  
  // Description
  doc.setFontSize(11);
  doc.text('Description:', 20, 160);
  const splitDescription = doc.splitTextToSize(incident.description, 170);
  doc.text(splitDescription, 20, 170);
  
  // Analyst Notes
  doc.text('Analyst Notes:', 20, 200);
  const splitNotes = doc.splitTextToSize(incident.analystNotes, 170);
  doc.text(splitNotes, 20, 210);
  
  // Validation Evidence
  const yPos = 240;
  doc.text('Validation Evidence:', 20, yPos);
  doc.text(`• EXIF Valid: ${incident.validationEvidence.exifValid ? 'Yes' : 'No'}`, 25, yPos + 10);
  doc.text(`• Location Confirmed: ${incident.validationEvidence.locationConfirmed ? 'Yes' : 'No'}`, 25, yPos + 20);
  doc.text(`• Timeline Consistent: ${incident.validationEvidence.timelineConsistent ? 'Yes' : 'No'}`, 25, yPos + 30);
  doc.text(`• Cross Referenced: ${incident.validationEvidence.crossReferenced ? 'Yes' : 'No'}`, 25, yPos + 40);
  
  // Footer
  doc.setFontSize(8);
  doc.text('Generated by Authority Dashboard - Government of India', 20, 280);
  doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 285);
  doc.text('CONFIDENTIAL - For Official Use Only', 20, 290);
  
  doc.save(`incident-report-${incident.id}.pdf`);
}

export function generateCAP(incident: Incident): void {
  const capXml = `<?xml version="1.0" encoding="UTF-8"?>
<alert xmlns="urn:oasis:names:tc:emergency:cap:1.2">
  <identifier>${incident.id}</identifier>
  <sender>authority-dashboard@gov.in</sender>
  <sent>${new Date().toISOString()}</sent>
  <status>Actual</status>
  <msgType>Alert</msgType>
  <scope>Public</scope>
  <info>
    <category>Met</category>
    <event>${incident.eventType.replace('_', ' ')}</event>
    <urgency>${incident.severity === 'extreme' ? 'Immediate' : incident.severity === 'high' ? 'Expected' : 'Future'}</urgency>
    <severity>${incident.severity}</severity>
    <certainty>Observed</certainty>
    <headline>${incident.title}</headline>
    <description>${incident.description}</description>
    <instruction>Follow local authority guidelines and emergency procedures.</instruction>
    <web>https://authority-dashboard.gov.in/incidents/${incident.id}</web>
    <area>
      <areaDesc>${incident.location.address}, ${incident.location.district}, ${incident.location.state}</areaDesc>
      <circle>${incident.location.lat},${incident.location.lng} 5</circle>
    </area>
  </info>
</alert>`;

  const blob = new Blob([capXml], { type: 'application/xml' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `incident-${incident.id}.cap`;
  a.click();
  URL.revokeObjectURL(url);
}

export function generateGeoJSON(incidents: Incident[]): void {
  const geoJson = {
    type: 'FeatureCollection',
    features: incidents.map(incident => ({
      type: 'Feature',
      properties: {
        id: incident.id,
        title: incident.title,
        eventType: incident.eventType,
        severity: incident.severity,
        confidence: incident.confidence,
        status: incident.status,
        timestamp: incident.timestamp,
        description: incident.description,
        district: incident.location.district,
        state: incident.location.state,
        affectedPopulation: incident.affectedPopulation
      },
      geometry: {
        type: 'Point',
        coordinates: [incident.location.lng, incident.location.lat]
      }
    }))
  };

  const blob = new Blob([JSON.stringify(geoJson, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'incidents.geojson';
  a.click();
  URL.revokeObjectURL(url);
}

export function generateCSV(incidents: Incident[], shouldMaskPII: boolean = false): void {
  const headers = [
    'ID', 'Title', 'Event Type', 'Severity', 'Status', 'Confidence', 
    'Timestamp', 'District', 'State', 'Address', 'Latitude', 'Longitude',
    'Affected Population', 'Description', 'Analyst Notes'
  ].join(',');

  const rows = incidents.map(incident => [
    incident.id,
    `"${incident.title}"`,
    incident.eventType,
    incident.severity,
    incident.status,
    incident.confidence,
    incident.timestamp,
    incident.location.district,
    incident.location.state,
    `"${incident.location.address}"`,
    incident.location.lat,
    incident.location.lng,
    incident.affectedPopulation || '',
    `"${incident.description.replace(/"/g, '""')}"`,
    `"${incident.analystNotes.replace(/"/g, '""')}"`
  ].join(',')).join('\n');

  const csv = headers + '\n' + rows;
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'incidents.csv';
  a.click();
  URL.revokeObjectURL(url);
}